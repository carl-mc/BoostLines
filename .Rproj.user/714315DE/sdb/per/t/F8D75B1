{
    "collab_server" : "",
    "contents" : "Rcpp::loadModule(\"mod\", TRUE)\n\n#' Create a BoostLines Object\n#'\n#' Creates a BoostLines object.\n#'\n#' BoostLine objects may not contain multilines.\n#'\n#' @param x A SpatialLines object or a Rcpp_line_collection object.\n#' @param proj4string A proj4string, ignored if \\code{x} is SpatialLines.\n#'\n#' @return A BoostLine S3 object.\n#'\n#' @import Rcpp\n#'\n#' @export\nBoostLines <- function(x, proj4string='') {\n\n  if (inherits(x, 'SpatialLines')) {\n    sl <- x\n\n    ## Make lc object\n    coords_ls <- lapply(sl@lines, {\n      function(x) {\n        if (length(x@Lines) > 1) {\n          stop('No multilines!')\n        }\n        x@Lines[[1]]@coords\n      }\n    })\n    lc <- make_lc(coords_ls)\n\n    ## Make and return class\n    me <- list(\n      lc = lc,\n      proj4string = sl@proj4string\n    )\n  } else if (inherits(x, 'Rcpp_line_collection')) {\n\n    me <- list(\n      lc = x,\n      proj4string = proj4string\n    )\n  } else {\n    stop('x of invalid class.')\n  }\n\n  class(me) <- append(class(me), \"BoostLines\")\n\n  return(me)\n}\n\n\n#' Cast BoostLines as SpatialLines\n#'\n#' Creates a SpatialLines object.\n#'\n#' @param bl A BoostLines object.\n#'\n#' @return A SpatialLines object.\n#'\n#' @export\nunboost <- function(bl) {\n  UseMethod(\"unboost\", bl)\n}\n\nunboost.BoostLines <- function(bl) {\n\n  coords_ls <- unpack_lc(bl$lc)\n  cntr <- 1\n  lns_ls <- lapply(coords_ls, {\n    function(x) {\n      ln <- Lines(slinelist = list(Line(coords = x)), ID = as.character(cntr))\n      cntr <<- cntr + 1\n      return(ln)\n    }\n  })\n  sl <- SpatialLines(lns_ls, proj4string = bl$proj4string)\n\n  return(sl)\n}\n\n#' Node BoostLines object\n#'\n#' Breaks lines at all proper intersections.\n#'\n#' @param bl A BoostLines object.\n#'\n#' @return A list of (1) the noded BoostLines object and (2) an integer vector of line IDs.\n#'\n#' @export\nbNode <- function(bl) {\n  UseMethod(\"bNode\", bl)\n}\n\nbNode.BoostLines <- function(bl) {\n\n  broken_ls <- node_lc(bl$lc)\n  broken_lc <- broken_ls[[1]]\n  broken_ids <- broken_ls[[2]]\n  broken_bl <- BoostLines(broken_lc, bl$proj4string)\n  out_ls <- list(broken_bl, broken_ids)\n\n  return(out_ls)\n}\n\n#' Test BoostLines Intersections\n#'\n#' Checks whether BoostLines intersect.\n#'\n#' @param bl A BoostLines object.\n#'\n#' @return A logical matrix.\n#'\n#' @export\nbIntersects <- function(bl) {\n  UseMethod(\"bIntersects\", bl)\n}\n\nbIntersects.BoostLines <- function(bl) {\n\n  lm <- intersects_lc(bl$lc)\n\n  return(lm)\n}\n\n#' Calculate BoostLines Minimal Distances\n#'\n#' Calculates minimal distances between BoostLines.\n#'\n#' @param bl A BoostLines object.\n#'\n#' @return A numeric matrix.\n#'\n#' @export\nbDistance <- function(bl) {\n  UseMethod(\"bDistance\", bl)\n}\n\nbDistance.BoostLines <- function(bl) {\n\n  dm <- distance_lc(bl$lc)\n\n  return(dm)\n}\n",
    "created" : 1490015814460.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3472126987",
    "id" : "F8D75B1",
    "lastKnownWriteTime" : 1490023762,
    "last_content_update" : 1490023762389,
    "path" : "~/Projects/BoostLines/BoostLines/R/boost_lines.R",
    "project_path" : "R/boost_lines.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}